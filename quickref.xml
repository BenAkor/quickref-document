<?xml version="1.0" encoding="UTF-8"?>

<quickref>
    <item id="d9f3a2ee-5e14-43a2-b367-707ec416f586">
        <title>Prepare Repository</title>
        <summary>Start working with a git repository</summary>
        <list>
            <item id="22ef7d0a-6c75-4daf-913b-3ed78930c5db">
                <title>Initialize Repository</title>
                <summary>Create new empty repository in current directory</summary>
                <command>git init</command>
            </item>
            <item id="47f78db3-9524-4813-b126-341273a6d66c">
                <title>Clone Repository</title>
                <summary>Clone repository from URL</summary>
                <command>git clone &lt;url&gt; &lt;dir&gt;</command>
            </item>
        </list>
    </item>
    <item id="8062ee97-2873-468e-8759-4151e5b8dfeb">
        <title>Configuration</title>
        <summary>Before you start working with a repository, it should be properly configured</summary>
        <list>
            <item id="1c860efd-13b2-4b02-baff-bec7ab0fbf52">
                <title>Show Configurations</title>
                <summary>Show current configurations</summary>
                <command>git config --list</command>
            </item>
            <item id="c63ccf87-3ed7-490a-bd1c-21f329c317ef">
                <title>Set User Name</title>
                <summary>Set committer user name</summary>
                <command>git config user.name &lt;"name"&gt;</command>
            </item>
            <item id="a5cb0392-cb8c-41b8-9f2d-15086e0e00eb">
                <title>Set User Email</title>
                <summary>Set committer email address</summary>
                <command>git config user.email &lt;"email"&gt;</command>
            </item>
            <item id="59e3a878-d267-4ec8-8fb7-ea1823b1f00e">
                <title>Unix/Windows EOL Conversion</title>
                <summary>Automatically convert between Unix and Windows end of line on commit and checkout</summary>
                <command>git config core.autocrlf true</command>
            </item>
            <item id="b006e74f-47ca-4258-bc12-67292bf7d4de">
                <title>EOL Conversion on Save Only</title>
                <summary>Convert CRLF to LF only when commiting, use original line ending on checkout</summary>
                <command>git config core.autocrlf input</command>
            </item>
            <item id="39a20488-8c18-4fe4-9f7d-6e635937a145">
                <title>Change Editor</title>
                <summary>Change text editor for writing commit message</summary>
                <command>git config core.editor &lt;editor&gt;</command>
            </item>
            <item id="99852551-7a19-4fa3-8f95-5a089e7dadc7">
                <title>Get Configuration</title>
                <summary>Get configuration value for a configuration name</summary>
                <command>git config --get &lt;config-name&gt;</command>
            </item>
            <item id="3a3f642e-8acb-4429-bf47-6db7452a56d5">
                <title>Unset Configuration</title>
                <summary>Unset configuration value for given configuration name</summary>
                <command>git config --unset &lt;config-name&gt;</command>
            </item>
            <item id="66a884ca-3c13-463d-bb6e-3c3301110e3f">
                <title>Configuration Scope</title>
                <summary>--local or none for current repo, --global for user scope, --system for system scope</summary>
                <command>git config [--global | --system] &lt;name&gt; &lt;value&gt;</command>
            </item>
        </list>
    </item>
    <item id="6c1dd424-f721-4599-b00d-e6b8d00ab537">
        <title>Working With Repository</title>
        <summary>Adding files, commiting changes</summary>
        <list>
            <item id="0bd4640d-2724-43a4-a619-4a176bc432fb">
                <title>Show Status</title>
                <summary>Show working directory status, what files changed</summary>
                <command>git status</command>
            </item>
            <item id="0a51ed3e-ea9e-4eb0-92ed-19a547ea6ba5">
                <title>Add File to Index</title>
                <summary>Add file or directory to the index for the next commit</summary>
                <command>git add &lt;file&gt;</command>
            </item>
            <item id="8cfc621d-f622-4639-846f-0f224d16eefd">
                <title>Remove File from Index</title>
                <summary>Remove file from index, file on current directory unaffected</summary>
                <command>git reset -- &lt;file&gt;</command>
            </item>
            <item id="9bd5fc88-0ad1-4ce1-8b7a-cac3e5bb9a36">
                <title>Discard Modification</title>
                <summary>Discard file modification, restore file from index</summary>
                <command>git checkout -- &lt;file&gt;</command>
            </item>
            <item id="b0700e34-071a-4b11-bedb-f3abf2905b82">
                <title>Delete File</title>
                <summary>Delete file in the working directory and the index</summary>
                <command>git rm &lt;file&gt;</command>
            </item>
            <item id="c2d8aa7a-5245-4a18-bfdb-242f7f479a6f">
                <title>Commit Change</title>
                <summary>Apply changes in the index with given commit message</summary>
                <command>git commit -m ["message"]</command>
            </item>
            <item id="3cf0828f-d28d-47a8-ab0e-1f9a1dae5275">
                <title>Revise Commit</title>
                <summary>Replace last commit of the current branch with current index</summary>
                <command>git commit --amend</command>
            </item>
            <item id="1977d8bf-8b5c-44bb-837f-4574fdb4f7f4">
                <title>Reset Author</title>
                <summary>Amend commit author and author date to the committer</summary>
                <command>git commit --amend --reset-author</command>
            </item>
            <item id="2e7e7c4c-71d7-4c5a-8569-58efedd03813">
                <title>Change Author</title>
                <summary>Amend commit author with given author name and email, author date unchanged</summary>
                <command>git commit --amend --author="Author Name &lt;email&gt;"</command>
            </item>
            <item id="4d910de2-fc99-4caf-beb0-8375c11bbf5a">
                <title>Change Author Date</title>
                <summary>Amend author date, use ISO 8601 format for convenience</summary>
                <command>git commit --amend --date="1999-12-31T23:59:59"</command>
            </item>
            <item id="e96e23f2-5576-4bdf-87ef-1b1454c94acc">
                <title>Show Commit Log</title>
                <summary>Show commit logs, limit showing &lt;number&gt; commits</summary>
                <command>git log [-n &lt;number&gt;]</command>
            </item>
            <item id="9142bf22-e4d7-432c-900c-e8534fbd2ec8">
                <title>Show Short Log</title>
                <summary>Show shorter commit log</summary>
                <command>git shortlog</command>
            </item>
            <item id="3c150b89-cd61-4e18-bf8a-76ac79c2f1d0">
                <title>Short Log Summary</title>
                <summary>Show even shorter commit count summary</summary>
                <command>git shortlog -s</command>
            </item>           
            <item id="adc40707-789c-4add-a8ab-3dedf7d87427">
                <title>Diff Working Directory</title>
                <summary>Show diff between index and working directory</summary>
                <command>git diff</command>
            </item>
            <item id="f490d675-8c6d-42af-93ee-7d00a27ac77b">
                <title>Diff Working Directory and Branch</title>
                <summary>Show diff between branch and working directory</summary>
                <command>git diff &lt;branch-name&gt;</command>
            </item>
            <item id="c19a66d7-9428-456e-bc9e-7047d792b7b0">
                <title>Show Diff between Branches</title>
                <summary>Show diff between two branches</summary>
                <command>git diff &lt;branch-1&gt; &lt;branch-2&gt;</command>
            </item>
            <item id="b44657de-c49a-4b80-be7a-0551fce8c2aa">
                <title>Remove Untracked Files</title>
                <summary>Interactively remove untracked files from repository</summary>
                <command>git clean -i</command>
            </item>           
        </list>
    </item>
    <item id="adfbcfbf-a59d-4f27-b662-48f4559e794f">
        <title>Manage Branch</title>
        <summary>Working with git branches</summary>
        <list>
            <item id="3aae1196-87fd-47ec-828c-7b61aeef256f">
                <title>Detach Branch</title>
                <summary>Detach head from current branch</summary>
                <command>git checkout --detach</command>
            </item>
            <item id="75dcf789-e3b8-48cf-9699-217eaf2b1f40">
                <title>Create New Branch</title>
                <summary>Create new branch starting from current head</summary>
                <command>git checkout -b &lt;branch-name&gt;</command>
            </item>
            <item id="943cac7b-30dc-450b-a501-2f8f8eec4fd9">
                <title>Switch Branch</title>
                <summary>Change active branch</summary>
                <command>git checkout &lt;branch-name&gt;</command>
            </item>
            <item id="0106894f-3a72-4d62-b7b6-f61a7430ba1c">
                <title>Checkout to Commit Name</title>
                <summary>Checkout to commit-name. Commit name can be branch name, commit hash or relative HEAD reference.</summary>
                <command>git checkout &lt;commit-name&gt;</command>
            </item>
            <item id="5c72b2d1-3cad-4374-a00a-d316c00ca6f4">
                <title>Checkout to Previous Commit</title>
                <summary>Detach head and switch to previous commit. Where ~1 is previous commit, ~2 is previous 2 commits, etc.</summary>
                <command>git checkout &lt;HEAD~1&gt;</command>
            </item>
            <item id="882ddd2b-bf74-41bd-8d1d-76a8c940e0b3">
                <title>Reset Current Head</title>
                <summary>Move current branch head to commit-name. Changes in index AND working directory are discarded. Potentially causing commits after commit-name lose. Use with caution.</summary>
                <command>git reset --hard &lt;commit-name&gt;</command>
            </item>
            <item id="def635bf-c0ab-442f-a524-e900eecf4a4b">
                <title>List Branches</title>
                <summary>List local branches</summary>
                <command>git branch [--list]</command>
            </item>
            <item id="aed55f1d-7dfd-42b5-8b71-dd09c5736958">
                <title>List Remote Tracking Branches</title>
                <summary>List remote tracking branches</summary>
                <command>git branch -r</command>
            </item>
            <item id="6fe49b91-6b51-4cf9-a080-0a3e24b1cfff">
                <title>List All Branches</title>
                <summary>List both local and remote-tracking branches</summary>
                <command>git branch -a</command>
            </item>
            <item id="bad163b4-062f-4b2f-80a5-13a504a09b01">
                <title>Delete Branch</title>
                <summary>Delete already merged branches</summary>
                <command>git branch -d &lt;branch-name&gt;</command>
            </item>
            <item id="a84b6004-cfe5-4b3f-97d8-df0b582c22dc">
                <title>Force Delete Branch</title>
                <summary>Delete branch, even unmerged. Use with caution.</summary>
                <command>git branch -D &lt;branch-name&gt;</command>
            </item>
            <item id="f4520d7f-6075-49fb-b953-28aba2173de9">
                <title>Merge Branch</title>
                <summary>Merge other branch with current branch, fast-forward if possible</summary>
                <command>git merge &lt;other-branch&gt;</command>
            </item>
            <item id="6f12d9da-116c-4871-9986-1023e037713e">
                <title>Merge Using Merge Commit</title>
                <summary>Merge other branch, use merge commit</summary>
                <command>git merge --no-ff &lt;other-branch&gt;</command>
            </item>
            <item id="2740ac26-f1d0-43a2-8522-ba8b94ccf804">
                <title>Interactive Branch Rebase</title>
                <summary>Rebase current branch with other branch interactively</summary>
                <command>git rebase -i &lt;other-branch&gt;</command>
            </item>
        </list>
    </item>
    <item id="f34eb266-3b54-44a4-a614-b95e4128c22d">
        <title>Manage Tags</title>
        <summary>Manage local tags</summary>
        <list>
            <item id="d2b02686-25da-4eb1-87f1-50ecc3170780">
                <title>List Tags</title>
                <summary>List available tags</summary>
                <command>git tag</command>
            </item>
            <item id="324d24ad-7335-4f08-9ef5-2260ac0a7374">
                <title>Add Tag</title>
                <summary>Create new lightweight tag named &lt;tag-name&gt;</summary>
                <command>git tag &lt;tag-name&gt;</command>
            </item>
            <item id="a5eef94d-7f33-426f-96ef-8bde1b1e3be9">
                <title>Delete Tag</title>
                <summary>Delete a tag named &lt;tag-name&gt;</summary>
                <command>git tag -d &lt;tag-name&gt;</command>
            </item>
        </list>
    </item>
    <item id="7aaef564-5281-4040-8002-0f8ff9b2ea0a">
        <title>Stash Working Directory</title>
        <summary>Save and restore working directory state</summary>
        <list>
            <item id="e41b3210-34ca-47b8-bdde-e98a3483f956">
                <title>Stash Working Directory</title>
                <summary>Save working directory state to new stash and clean up working directory</summary>
                <command>git stash save</command>
            </item>
            <item id="abf41d60-815f-4d69-9155-7e6ba6726e62">
                <title>List Stashes</title>
                <summary>List stashes, stash@{0} is last stash</summary>
                <command>git stash list</command>
            </item>
            <item id="dbc2e739-1ce1-4a35-aee7-1bdb483cf3af">
                <title>Restore Stash</title>
                <summary>Restore last stash and apply to working directory</summary>
                <command>git stash pop</command>
            </item>
            <item id="b8873c1c-55a4-4b60-8bac-6e0e138d12a3">
                <title>Remove Last Stash</title>
                <summary>Remove last stash, saved state will be discarded</summary>
                <command>git stash drop</command>
            </item>
            <item id="7cb63ffb-69b5-4657-82ff-0306c690aa65">
                <title>Clear Stashes</title>
                <summary>Remove all stashes, saved states will be discarded</summary>
                <command>git stash clear</command>
            </item>
        </list>
    </item>
    <item id="8295e808-175d-4a05-97ec-68db6c5535ae">
        <title>Remote Repository</title>
        <summary>Synchronize objects between local and remote repository</summary>
        <list>
            <item id="ce2c3c3f-c625-49be-870b-3451b89e1228">
                <title>Show remote repositories</title>
                <summary>Show remote repositories name and url for push/fetch</summary>
                <command>git remote -v</command>
            </item>
            <item id="f002d168-2aea-4775-baed-795ad893eb95">
                <title>Add Remote Repository</title>
                <summary>Add new remote repository with given remote name</summary>
                <command>git remote add &lt;remote-name&gt; &lt;url&gt;</command>
            </item>
            <item id="3fae3ab0-a234-412a-a525-a34a3b7b1e0e">
                <title>Push Branch to Remote</title>
                <summary>Push local branch to remote repository</summary>
                <command>git push &lt;remote-name&gt; &lt;branch-name&gt;</command>
            </item>
            <item id="5793af9f-4226-4750-8ca0-3084cff04fb6">
                <title>Delete Remote Branch</title>
                <summary>Delete a branch from remote repository</summary>
                <command>git push --delete &lt;remote-name&gt; &lt;branch-name&gt;</command>
            </item>
            <item id="bac944cd-0535-4306-899e-564a6b59eec1">
                <title>Push Tag</title>
                <summary>Push single local tag to remote repository</summary>
                <command>git push &lt;remote-name&gt; &lt;tag-name&gt;</command>
            </item>
            <item id="bc24d790-9ac7-41ba-a9c6-eda908c19bb0">
                <title>Push All Tags</title>
                <summary>Push all local tags to remote repository</summary>
                <command>git push --tags &lt;remote-name&gt;</command>
            </item>
            <item id="e1fa46c5-ec10-4c1f-bfdd-5f8462a7108d">
                <title>Delete Remote Tag</title>
                <summary>Delete a tag from remote repository</summary>
                <command>git push --delete &lt;remote-name&gt; &lt;tag-name&gt;</command>
            </item>
            <item id="c5369eb7-fa30-4307-979f-056255c2ae58">
                <title>Fetch from Remote</title>
                <summary>Update remote-tracking branches. Remote-tracking branches are NOT automatically merged with local branches. Use git branch -r to list remote-tracking branches.</summary>
                <command>git fetch &lt;remote-name&gt;</command>
            </item>
            <item id="c3dbe1ad-ed95-4699-a878-4c62a7d98d26">
                <title>Pull from Remote</title>
                <summary>Retrieve objects from remote branches, and merge with current branch. Use with caution.</summary>
                <command>git pull &lt;remote-name&gt; &lt;branch-name&gt;</command>
            </item>
        </list>
    </item>
    <item id="a5eb6739-037c-4c50-9153-50d3a7812681">
        <title>Repository Maintenance</title>
        <summary>Keep git repository clean and optimized</summary>
        <list>
            <item id="2431b4ae-54d4-4258-bce7-df88e8857c05">
                <title>Optimize Repository</title>
                <summary>Remove unnecessary files and references, optimize repository. It is a good idea to run gc periodically.</summary>
                <command>git gc</command>
            </item>
            <item id="493328c6-7e84-44ca-aa80-daf9d07694ad">
                <title>Optimize Repository if Required</title>
                <summary>Check and run gc only if required, otherwise exit without doing gc</summary>
                <command>git gc --auto</command>
            </item>
            <item id="a0fd62b5-46f2-4a53-87d7-a2e68ee86597">
                <title>Check Repository</title>
                <summary>Check integrity of objects in the repository</summary>
                <command>git fsck</command>
            </item>
        </list>
    </item>
</quickref>
